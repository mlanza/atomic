import {log, chain, pipe, add, curry} from './core';
import {indexedSeq} from './types/indexed-seq';
import List from './types/list';
import Array from './types/array';
import Object from './types/object';
import HTMLDocument from './types/html-document';
import HTMLElement from './types/html-element';
import {first, rest} from './protocols/seq';
import {nth} from './protocols/indexed';
import {count} from './protocols/counted';
import {next} from './protocols/next';
export const nums = indexedSeq([11,12,13,14], 1);
export const letters = indexedSeq("grace");
export {log, chain, pipe, add, juxt} from './core';
export {first, rest} from './protocols/seq';
export {nth} from './protocols/indexed';
export {count} from './protocols/counted';
export {next} from './protocols/next';
export {reduce, Reduce} from './protocols/reduce';
import {reduce, Reduce} from './protocols/reduce';
import {toArray, toObject} from './coll';
import {each, map, filter, find, satisfies} from './curried';
export {parent, closest, remove} from './protocols/hierarchy';
export {query, fetch} from './protocols/query';
export {each, map, filter, find, satisfies} from './curried';
export {assoc, hasKey} from './protocols/associative';
export {get} from './protocols/lookup';

QUnit.test("IndexedSeq", function(assert){
  assert.equal(chain(letters, first), "g");
  assert.equal(chain(letters, nth(2)), "a");
  assert.equal(chain(nums, first), 12);
  assert.equal(chain(nums, nth(1)), 13);
  assert.equal(chain(nums, count), 3);
  assert.ok(chain(nums, satisfies(Reduce)));
  assert.equal(chain(nums, reduce(add, 0)), 39);
  assert.deepEqual(chain([["Moe", "Howard"], ["Curly", "Howard"]], toObject), {Moe: "Howard", Curly: "Howard"});
  assert.deepEqual(chain({Moe: "Howard", Curly: "Howard"}, toArray), [["Moe", "Howard"], ["Curly", "Howard"]]);
});