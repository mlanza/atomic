import {curry} from "./types";
import {overload, subj, obj} from "./core";
import * as c from "./core";
import * as p from "./protocols";
import * as a from "./associatives";
import * as dom from "./dom";
import * as pred from "./predicates";
import * as types from "./types";

export * from "./core";
export * from "./protocols";
export * from "./types";
export * from "./pipelines";
export * from "./dom";
export {someFn} from "./predicates";

export const reduce = curry(p.reduce, 3);
export const append = subj(p.append);
export const prepend = subj(p.prepend);
export const conj = subj(p.conj);
export const invoke = subj(p.invoke);
export const find = subj(p.find);
export const assoc = subj(p.assoc);
export const contains = subj(p.contains);
export const dissoc = subj(p.dissoc);
export const pub = subj(p.pub);
export const sub = subj(p.sub);
export const superset = subj(p.superset);
export const doto = subj(c.doto);
export const transduce = obj(type.transduce);
export const each = obj(types.each);
export const dorun = obj(types.dorun);
export const doall = obj(types.doall);
export const dotimes = obj(types.dotimes);
export const some = obj(types.some);
export const notSome = obj(types.notSome);
export const notAny = obj(types.notAny);
export const every = obj(types.every);
export const notEvery = obj(types.notEvery);
export const map = obj(types.map);
export const mapa = obj(types.mapa);
export const mapIndexed = obj(types.mapIndexed);
export const keepIndexed = obj(types.keepIndexed);
export const filter = obj(types.filter);
export const filtera = obj(types.filtera);
export const remove = obj(types.remove);
export const keep = obj(types.keep);
export const drop = obj(types.drop);
export const dropWhile = obj(types.dropWhile);
export const dropLast = obj(types.dropLast);
export const take = obj(types.take);
export const takeWhile = obj(types.takeWhile);
export const takeNth = obj(types.takeNth);
export const takeLast = obj(types.takeLast);
export const interleave = obj(types.interleave);
export const interpose = obj(types.interpose);
export const partition = obj(types.partition);
export const partitionAll = obj(types.partitionAll);
export const partitionBy = obj(types.partitionBy);
export const splitAt = obj(types.splitAt);
export const splitWith = obj(types.splitWith);
export const mapcat = obj(types.mapcat);
export const sort = obj(types.sort);
export const sortBy = obj(types.sortBy);
export const groupInto = obj(types.groupInto);
export const groupBy = obj(types.groupBy);
export const doseq = obj(types.doseq);
export const detect = obj(types.detect);
export const repeatedly = obj(types.repeatedly);
export const repeat = obj(types.repeat);
export const interate = obj(types.interate);
export const best = obj(types.best);
export const scan = obj(types.scan);
export const andSelf = obj(types.andSelf);
export const sel = obj(types.sel);
export const into = obj(types.into);
export const isInstance = subj(c.isInstance);
export const pre = subj(pred.pre);
export const post = subj(pred.post);
export const matches = subj(pred.matches);
export const branch = obj(pred.branch);
export const cond = subj(pred.cond);
export const everyPair = obj(pred.everyPair);
export const compare = subj(pred.compare);
export const isIdentical = subj(pred.isIdentical);
export const gt = subj(pred.gt);
export const gte = subj(pred.gte);
export const lt = subj(pred.lt);
export const lte = subj(pred.lte);
export const eq = subj(pred.eq);
export const notEq = subj(pred.notEq);
export const equal = subj(pred.equal);
export const min = subj(pred.min);
export const max = subj(pred.max);
export const get = subj(a.get);
export const getIn = subj(a.getIn);
export const index = obj(a.get);
export const assocIn = subj(a.assocIn);
export const update = subj(a.update);
export const clamp = subj(types.clamp);
export const matches = subj(dom.matches);
export const embeds = subj(p.embeds);
export const embed = subj(p.embed);